#include "intervalTimer.h"
#include "../switchesAndButtons/buttons.h"
#include <stdio.h>
#include "xparameters.h"
#include "xil_io.h"

#define ZERO_REG 0
#define CASC_INIT_VALUE 0x00000800
#define TCSR0_OFFSET 0
#define TLR0_OFFSET 0x04
#define TCR0_OFFSET 0x08
#define TCSR1_OFFSET 0x10
#define TLR1_OFFSET 0x14
#define TCR1_OFFSET 0x18


uint32_t readTimerRegister(uint32_t baseAddr, uint32_t offset) {
    return Xil_In32(baseAddr + offset);
}

void writeTimerRegister(uint32_t baseAddr, uint32_t offset, uint32_t writeValue) {
    Xil_Out32(baseAddr + offset, writeValue);
}

//uint32_t readTimer0Register(uint32_t offset) {
//    return Xil_In32(XPAR_AXI_TIMER_0_BASEADDR + offset);
//}
//
//void writeTimer0Register(uint32_t offset, uint32_t writeValue) {
//    Xil_Out32(XPAR_AXI_TIMER_0_BASEADDR + offset, writeValue);
//}
//
//uint32_t readTimer1Register(uint32_t offset) {
//    return Xil_In32(XPAR_AXI_TIMER_1_BASEADDR + offset);
//}
//
//void writeTimer1Register(uint32_t offset, uint32_t writeValue) {
//    Xil_Out32(XPAR_AXI_TIMER_1_BASEADDR + offset, writeValue);
//}
//
//uint32_t readTimer2Register(uint32_t offset) {
//    return Xil_In32(XPAR_AXI_TIMER_2_BASEADDR + offset);
//}
//
//void writeTimer2Register(uint32_t offset, uint32_t writeValue) {
//    Xil_Out32(XPAR_AXI_TIMER_2_BASEADDR + offset, writeValue);
//}

uint64_t readTimer0Value() {
    //uint32_t upperValue = readTimer0Register()
}

intervalTimer_status_t intervalTimer_init(unsigned char timerNumber) {

    uint32_t baseAddr;

    switch(timerNumber) {

        case INTERVAL_TIMER_TIMER_0:
            baseAddr = XPAR_AXI_TIMER_0_BASEADDR;
            break;
        case INTERVAL_TIMER_TIMER_1:
            baseAddr = XPAR_AXI_TIMER_1_BASEADDR;
            break;
        case INTERVAL_TIMER_TIMER_2:
            baseAddr = XPAR_AXI_TIMER_2_BASEADDR;
            break;
        default:
            printf("You attempted to initialize a timer number outside of the accepted range");
            return INTERVAL_TIMER_STATUS_FAIL;
    }

    writeTimerRegister(baseAddr, TCSR0_OFFSET, ZERO_REG);
    writeTimerRegister(baseAddr, TCSR1_OFFSET, ZERO_REG);
    writeTimerRegister(baseAddr, TCSR0_OFFSET, ZERO_REG);

    return INTERVAL_TIMER_STATUS_OK;
}





