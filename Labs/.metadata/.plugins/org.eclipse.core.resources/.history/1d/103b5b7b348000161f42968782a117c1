#include "intervalTimer.h"
#include "../switchesAndButtons/buttons.h"
#include <stdio.h>
#include "xparameters.h"
#include "xil_io.h"

#define ZERO_INIT_VALUE_SMALL 0x000
#define ZERO_INIT_VALUE_LARGE 0x00000000
#define CASC_INIT_VALUE 0x800

#define TCSR0_OFFSET 0
#define TLR0_OFFSET 0x04
#define TCR0_OFFSET 0x08
#define TCSR1_OFFSET 0x10
#define TLR1_OFFSET 0x14
#define TCR1_OFFSET 0x18

#define ENT_MASK 0x080
#define LOAD_MASK 0x020
#define UDT_MASK 0x002

uint32_t getBaseAddress(uint32_t timerNumber) {
    uint32_t baseAddr;

    switch(timerNumber) {

        case INTERVAL_TIMER_TIMER_0:
            baseAddr = XPAR_AXI_TIMER_0_BASEADDR;
            break;
        case INTERVAL_TIMER_TIMER_1:
            baseAddr = XPAR_AXI_TIMER_1_BASEADDR;
            break;
        case INTERVAL_TIMER_TIMER_2:
            baseAddr = XPAR_AXI_TIMER_2_BASEADDR;
            break;
    }

    return baseAddr;
}

uint32_t readTimerRegister(uint32_t baseAddr, uint32_t offset) {
    return Xil_In32(baseAddr + offset);
}

void writeTimerRegister(uint32_t baseAddr, uint32_t offset, uint32_t writeValue) {
    Xil_Out32(baseAddr + offset, writeValue);
}

uint64_t readTimer0Value() {
    //uint32_t upperValue = readTimer0Register()
}

intervalTimer_status_t intervalTimer_init(uint32_t timerNumber) {

    uint32_t baseAddr = getBaseAddress(timerNumber);

    writeTimerRegister(baseAddr, TCSR0_OFFSET, ZERO_INIT_VALUE_SMALL);
    writeTimerRegister(baseAddr, TCSR1_OFFSET, ZERO_INIT_VALUE_SMALL);
    writeTimerRegister(baseAddr, TCSR0_OFFSET, CASC_INIT_VALUE);

    return INTERVAL_TIMER_STATUS_OK;
}


void intervalTimer_start(uint32_t timerNumber) {
    uint32_t baseAddr = getBaseAddress(timerNumber);
    uint32_t tcsr0Val = readTimerRegister(baseAddr, TCSR0_OFFSET);
    writeTimerRegister(baseAddr, TCSR0_OFFSET, tcsr0Val | ENT_MASK);
}

void intervalTimer_stop(uint32_t timerNumber) {
    uint32_t baseAddr = getBaseAddress(timerNumber);
    uint32_t tcsr0Val = readTimerRegister(baseAddr, TCSR0_OFFSET);
    writeTimerRegister(baseAddr, TCSR0_OFFSET, tcsr0Val & (~ENT_MASK));
}

void intervalTimer_reset(uint32_t timerNumber) {
    uint32_t baseAddr = getBaseAddress(timerNumber);

    // write a 0 to TLR0 register
    writeTimerRegister(baseAddr, TLR0_OFFSET, ZERO_INIT_VALUE_LARGE);

    // write a 1 into the LOAD0 bit in the TCSR0
    uint32_t tcsr0Val = readTimerRegister(baseAddr, TCSR0_OFFSET);
    writeTimerRegister(baseAddr, TCSR0_OFFSET, tcsr0Val | LOAD_MASK);

    intervalTimer_init(timerNumber);
}





