/*
 * clockControl.c
 *
 *  Created on: Sep 28, 2016
 *      Author: cdmoo
 */
#include <stdio.h>
#include "clockDisplay.h"

// States for the controller state machine.
enum clockControl_st_t {
    init_st,                 // Start here, stay in this state for just one tick.
    waiting_for_touch_st,    // waiting for touch, clock is enabled and running.
    ad_timer_running_st,     // waiting for the touch-controller ADC to settle.
    auto_timer_running_st,   // waiting for the auto-update delay to expire
                                 // (user is holding down button for auto-inc/dec)
    rate_timer_running_st,   // waiting for the rate-timer to expire to know when to perform the auto inc/dec.
    rate_timer_expired_st,   // when the rate-timer expires, perform the inc/dec function.
    add_second_to_clock_st   // add a second to the clock time and reset the ms counter.
} currentState = init_st;

void debugStatePrint();


void clockControl_tick() {
  // Perform state action first.
  switch(currentState) {
    case init_st:
      break;
    case waiting_for_touch_st:
      break;
    case ad_timer_running_st:
      break;
    case auto_timer_running_st:
      break;
    case rate_timer_running_st:
      break;
    case rate_timer_expired_st:
      break;
     default:
      printf("clockControl_tick state action: hit default\n\r");
      break;
  }

  // Perform state update next.
  switch(currentState) {
    case init_st:
      break;
    case waiting_for_touch_st:
      break;
    case ad_timer_running_st:
      break;
    case auto_timer_running_st:
      break;
    case rate_timer_running_st:
      break;
    case rate_timer_expired_st:
      break;
    case add_second_to_clock_st:
      break;
    default:
      printf("clockControl_tick state update: hit default\n\r");
      break;
  }
}


// This is a debug state print routine. It will print the names of the states each
// time tick() is called. It only prints states if they are different than the
// previous state.
void debugStatePrint() {
  static clockControl_st_t previousState;
  static bool firstPass = true;
  // Only print the message if:
  // 1. This the first pass and the value for previousState is unknown.
  // 2. previousState != currentState - this prevents reprinting the same state name over and over.
  if (previousState != currentState || firstPass) {
    firstPass = false;                // previousState will be defined, firstPass is false.
    previousState = currentState;     // keep track of the last state that you were in.
    printf("msCounter:%d\n\r", msCounter);
    switch(currentState) {            // This prints messages based upon the state that you were in.
      case init_st:
        printf("init_st\n\r");
        break;
      case never_touched_st:
        printf("never_touched_st\n\r");
        break;
      case waiting_for_touch_st:
        printf("waiting_for_touch_st\n\r");
        break;
      case ad_timer_running_st:
        printf("ad_timer_running_st\n\r");
        break;
      case auto_timer_running_st:
        printf("auto_timer_running_st\n\r");
        break;
      case rate_timer_running_st:
        printf("rate_timer_running_st\n\r");
        break;
      case rate_timer_expired_st:
        printf("rate_timer_expired_st\n\r");
        break;
     }
  }
}


