/*
 * clockDisplay.c
 *
 *  Created on: Sep 28, 2016
 *      Author: cdmoo
 */
#include "clockDisplay.h"
#include <stdio.h>
#include "supportFiles/display.h"
#include "string.h"
#include "supportFiles/utils.h"

#define CLOCK_TEXT_SIZE 6
#define NUM_DISPLAY_CHARS 8

#define ARROW_WIDTH (12 * CLOCK_TEXT_SIZE)
#define ARROW_HEIGHT (9 * CLOCK_TEXT_SIZE)
#define ARROW_PADDING (5.5 * CLOCK_TEXT_SIZE)
#define CLOCK_DISPLAY_WIDTH (3*ARROW_WIDTH + 2*ARROW_PADDING)
#define ARROW_OFFSET_X0 (DISPLAY_WIDTH / 2 - CLOCK_DISPLAY_WIDTH / 2)
#define ARROW_OFFSET_X1 (ARROW_OFFSET_X0 + ARROW_WIDTH + ARROW_PADDING)
#define ARROW_OFFSET_X2 (ARROW_OFFSET_X1 + ARROW_WIDTH + ARROW_PADDING)
#define ARROW_MIDY_OFFSET (6 * CLOCK_TEXT_SIZE)
#define ARROW_OFFSET_Y0 ((DISPLAY_HEIGHT / 2) - ARROW_MIDY_OFFSET)
#define ARROW_OFFSET_Y1 ((DISPLAY_HEIGHT / 2) + ARROW_MIDY_OFFSET)

#define CURSOR_POS_X0 ARROW_OFFSET_X0
#define CURSOR_POS_Y (DISPLAY_HEIGHT / 2 - 3 * CLOCK_TEXT_SIZE)
#define CURSOR_POS_X1 (CURSOR_POS_X0 + ARROW_WIDTH / 2)
#define CURSOR_POS_X2 (CURSOR_POS_X0 + ARROW_WIDTH)
#define CURSOR_POS_X3 ARROW_OFFSET_X1
#define CURSOR_POS_X4 (CURSOR_POS_X3 + ARROW_WIDTH / 2)
#define CURSOR_POS_X5 (CURSOR_POS_X3 + ARROW_WIDTH)
#define CURSOR_POS_X6 ARROW_OFFSET_X2
#define CURSOR_POS_X7 (CURSOR_POS_X6 + ARROW_WIDTH / 2)

static const int cursorPositions[NUM_DISPLAY_CHARS] = {CURSOR_POS_X0, CURSOR_POS_X1, CURSOR_POS_X2, CURSOR_POS_X3,
        CURSOR_POS_X4, CURSOR_POS_X5, CURSOR_POS_X6, CURSOR_POS_X7};

static uint32_t seconds = 0;
static uint32_t minutes = 0;
static uint32_t hours = 0;
static char currentTime[NUM_DISPLAY_CHARS];
static char displayedTime[NUM_DISPLAY_CHARS];

void displayCurrentTime();

void clockDisplay_init() {
    display_init();  // Must init all of the software and underlying hardware for LCD.
    display_fillScreen(DISPLAY_BLACK);  // Blank the screen.
    //display_setCursor(CURSOR_INIT_X, CURSOR_INIT_Y);            // The upper left of the LCD screen.
    display_setTextColor(DISPLAY_RED);  // Make the text red.
    display_setTextSize(CLOCK_TEXT_SIZE);             // Make the text a little larger.
    //display_println("HELLO");

    display_fillTriangle(ARROW_OFFSET_X0, ARROW_OFFSET_Y0, ARROW_OFFSET_X0 + ARROW_WIDTH, ARROW_OFFSET_Y0,
            ARROW_OFFSET_X0 + ARROW_WIDTH / 2, ARROW_OFFSET_Y0 - ARROW_HEIGHT, DISPLAY_GREEN);
    display_fillTriangle(ARROW_OFFSET_X1, ARROW_OFFSET_Y0, ARROW_OFFSET_X1 + ARROW_WIDTH, ARROW_OFFSET_Y0,
            ARROW_OFFSET_X1 + ARROW_WIDTH / 2, ARROW_OFFSET_Y0 - ARROW_HEIGHT, DISPLAY_GREEN);
    display_fillTriangle(ARROW_OFFSET_X2, ARROW_OFFSET_Y0, ARROW_OFFSET_X2 + ARROW_WIDTH, ARROW_OFFSET_Y0,
            ARROW_OFFSET_X2 + ARROW_WIDTH / 2, ARROW_OFFSET_Y0 - ARROW_HEIGHT, DISPLAY_GREEN);

    display_fillTriangle(ARROW_OFFSET_X0, ARROW_OFFSET_Y1, ARROW_OFFSET_X0 + ARROW_WIDTH, ARROW_OFFSET_Y1,
            ARROW_OFFSET_X0 + ARROW_WIDTH / 2, ARROW_OFFSET_Y1 + ARROW_HEIGHT, DISPLAY_GREEN);
    display_fillTriangle(ARROW_OFFSET_X1, ARROW_OFFSET_Y1, ARROW_OFFSET_X1 + ARROW_WIDTH, ARROW_OFFSET_Y1,
            ARROW_OFFSET_X1 + ARROW_WIDTH / 2, ARROW_OFFSET_Y1 + ARROW_HEIGHT, DISPLAY_GREEN);
    display_fillTriangle(ARROW_OFFSET_X2, ARROW_OFFSET_Y1, ARROW_OFFSET_X2 + ARROW_WIDTH, ARROW_OFFSET_Y1,
            ARROW_OFFSET_X2 + ARROW_WIDTH / 2, ARROW_OFFSET_Y1 + ARROW_HEIGHT, DISPLAY_GREEN);

    //init the time strings
    sprintf(currentTime, "%02hd:%02hd:%02hd", hours, minutes, seconds);
    //display_println(currentTime);
    displayCurrentTime();
}

void displayCurrentTime() {
    printf("%s\n\r", currentTime);
    printf("printing digit 0 at position %f\n\r", CURSOR_POS_X0);
    display_setCursor(CURSOR_POS_X0, CURSOR_POS_Y);
    display_print(currentTime[0]);

//    display_setCursor(CURSOR_POS_X1, CURSOR_POS_Y);
//    display_print(currentTime[1]);
//
//    display_setCursor(CURSOR_POS_X2, CURSOR_POS_Y);
//    display_print(currentTime[2]);
//
//    display_setCursor(CURSOR_POS_X3, CURSOR_POS_Y);
//    display_print(currentTime[3]);
//
//    display_setCursor(CURSOR_POS_X4, CURSOR_POS_Y);
//    display_print(currentTime[4]);
//
//    display_setCursor(CURSOR_POS_X5, CURSOR_POS_Y);
//    display_print(currentTime[5]);
//
//    display_setCursor(CURSOR_POS_X6, CURSOR_POS_Y);
//    display_print(currentTime[6]);
//
//    display_setCursor(CURSOR_POS_X7, CURSOR_POS_Y);
//    display_print(currentTime[7]);
}

void updateDisplayChar(int index) {
    printf("printing at pos %d with cursor position %d\n\r", index, cursorPositions[index]);
    display_setCursor(cursorPositions[index], CURSOR_POS_Y);
    display_setTextColor(DISPLAY_BLACK);
    display_print(displayedTime[index]);

    display_setTextColor(DISPLAY_RED);
    display_print(currentTime[index]);

    displayedTime[index] = currentTime[index];
}

void clockDisplay_updateTimeDisplay(bool forceUpdateAll) {
    printf("entering update time display\n\r");
    if(!forceUpdateAll && !strcmp(currentTime, displayedTime)) {
        printf("test failed, selectively updating\n\r");
        for(int i = 0; i < NUM_DISPLAY_CHARS; i++) {
            if(currentTime[i] != displayedTime[i]) {
                updateDisplayChar(i);
            }
        }
    }
    else {
        for(int i = 0; i < 1; i++) {
            updateDisplayChar(i);
        }
    }
}


void clockDisplay_runTest() {
    clockDisplay_init();
    utils_msDelay(5000);
    printf("number should change now\n\r");
    sprintf(currentTime, "%02hd:%02hd:%02hd", hours, minutes, seconds);
    clockDisplay_updateTimeDisplay(0);
}




