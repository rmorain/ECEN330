/*
 * ticTacToeDisplay.c
 *
 *  Created on: Oct 19, 2016
 *      Author: cdmoo
 */
#include "ticTacToeDisplay.h"
#include "supportFiles/display.h"
#include "../switchesAndButtons/switches.h"
#include "../switchesAndButtons/buttons.h"
#include "supportFiles/utils.h"
#include <stdio.h>

#define BOARD_LINE_X1 DISPLAY_WIDTH / 3
#define BOARD_LINE_X2 2 * DISPLAY_WIDTH / 3
#define BOARD_LINE_Y1 DISPLAY_HEIGHT / 3
#define BOARD_LINE_Y2 2 * DISPLAY_HEIGHT / 3

#define SQUARE_WIDTH DISPLAY_WIDTH / 3
#define SQUARE_HEIGHT DISPLAY_HEIGHT / 3
#define MID_SQUARE_OFFSET_X DISPLAY_WIDTH / 6
#define MID_SQUARE_OFFSET_Y DISPLAY_HEIGHT / 6
#define NEAR_SQUARE_OFFSET_X 20
#define NEAR_SQUARE_OFFSET_Y 10
#define FAR_SQUARE_OFFSET_X 80
#define FAR_SQUARE_OFFSET_Y 70
#define CIRCLE_RADIUS 30

#define ROW_ZERO 0
#define ROW_ONE 1
#define ROW_TWO 2
#define COLUMN_ZERO 0
#define COLUMN_ONE 1
#define COLUMN_TWO 2

void ticTacToeDisplay_init() {
    display_init();  // Must init all of the software and underlying hardware for LCD.
    display_fillScreen(DISPLAY_BLACK);  // Blank the screen.
    ticTacToeDisplay_drawBoardLines();
}

void ticTacToeDisplay_drawX(uint8_t row, uint8_t column, bool erase) {
    uint16_t baseX = column * SQUARE_WIDTH;
    uint16_t baseY = row * SQUARE_HEIGHT;

    uint16_t color = erase ? DISPLAY_BLACK : DISPLAY_YELLOW;

    display_drawLine(baseX + NEAR_SQUARE_OFFSET_X, baseY + NEAR_SQUARE_OFFSET_Y,
            baseX + FAR_SQUARE_OFFSET_X, baseY + FAR_SQUARE_OFFSET_Y, color);
    display_drawLine(baseX + FAR_SQUARE_OFFSET_X, baseY + NEAR_SQUARE_OFFSET_Y,
            baseX + NEAR_SQUARE_OFFSET_X, baseY + FAR_SQUARE_OFFSET_Y, color);
}

void ticTacToeDisplay_drawO(uint8_t row, uint8_t column, bool erase) {
    uint16_t circleX = column * SQUARE_WIDTH + MID_SQUARE_OFFSET_X;
    uint16_t circleY = row * SQUARE_HEIGHT + MID_SQUARE_OFFSET_Y;
    uint16_t color = erase ? DISPLAY_BLACK : DISPLAY_YELLOW;

    display_drawCircle(circleX, circleY, CIRCLE_RADIUS, color);
}

void ticTacToeDisplay_touchScreenComputeBoardRowColumn(uint8_t* row, uint8_t* column) {
    int16_t x, y;
    uint8_t z;
    display_getTouchedPoint(&x, &y, &z);

    if(x < BOARD_LINE_X1) {
        *column = COLUMN_ZERO;
    } else if(x < BOARD_LINE_X2) {
        *column = COLUMN_ONE;
    } else {
        *column = COLUMN_TWO;
    }

    if(y < BOARD_LINE_Y1) {
        *row = ROW_ZERO;
    } else if(y < BOARD_LINE_Y2) {
        *row = ROW_ONE;
    } else {
        *row = ROW_TWO;
    }
}

void ticTacToeDisplay_runTest() {
    bool exitTest = false;
    bool exitSession;
   // test loop
    while(!exitTest) {
        ticTacToeDisplay_init();

        exitSession = false;
        uint8_t row, column;

        // session loop
        while(!exitSession && !exitTest) {
            if(buttons_read() && BUTTONS_BTN0_MASK) {
                printf("button 0 is pressed\n");
                exitSession = true;
            }

            if(buttons_read() && BUTTONS_BTN1_MASK) {
                printf("button 1 is pressed\n");
                exitTest = true;
            }

            if(display_isTouched()) {
                display_clearOldTouchData();
                utils_msDelay(50);
                ticTacToeDisplay_touchScreenComputeBoardRowColumn(&row, &column);
                switches_read() && SWITCHES_SW0_MASK
                        ? ticTacToeDisplay_drawO(row, column, false)
                        : ticTacToeDisplay_drawX(row, column, false);
            }

        }
    }
    printf("Exiting Tic Tac Toe Test");
}

void ticTacToeDisplay_drawBoardLines() {
    display_drawLine(BOARD_LINE_X1, 0, BOARD_LINE_X1, DISPLAY_HEIGHT, DISPLAY_YELLOW);
    display_drawLine(BOARD_LINE_X2, 0, BOARD_LINE_X2, DISPLAY_HEIGHT, DISPLAY_YELLOW);
    display_drawLine(0, BOARD_LINE_Y1, DISPLAY_WIDTH, BOARD_LINE_Y1, DISPLAY_YELLOW);
    display_drawLine(0, BOARD_LINE_Y2, DISPLAY_WIDTH, BOARD_LINE_Y2, DISPLAY_YELLOW);
}

